require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PapersController do

  # This should return the minimal set of attributes required to create a valid
  # Paper. As you add validations to Paper, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { title:"Opgavetitel", undertitel:"Undertitel", forfatter:["0" =>{gn:"Fornavn1, sn:Efternavn1"},"1" => {gn:"Fornavn2", sn:"Efternavn2"}], abstrakt:"ABSTRACT mutus nomen dedit cocis", afleveringsaar:"2011", studium:"Biologi", opgavetype:"bacheloropgave", opgavesprog:"Dansk"}
  end



  # This returns a pdf-file to simulate an uploaded file
  # should mock 'original_filename'
  def upload_file(filename,mime)
    file = ActionDispatch::Http::UploadedFile.new(filename: 'test.pdf', type: 'application/pdf', tempfile: File.new("#{Rails.root}/spec/fixtures/test.pdf"))
    file
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PapersController. Be sure to keep this updated too.
  def valid_session
    {  }
  end

=begin
  describe "GET index" do
    it "assigns all papers as @papers" do
      paper = Paper.create! valid_attributes
      get :index, {}, valid_session
      assigns(:papers).should eq([paper])
    end
  end
=end

  before(:each) do
    login_admin
  end

  before do
    @paper = Paper.new(valid_attributes)
    @paper.add_file(upload_file("test.pdf","application/pdf"))
    @paper.save
  end

  describe "GET new" do
    it "assigns a new paper as @paper" do
      get :new, {}, valid_session
      assigns(:paper).should be_a_new(Paper)
    end
  end


  describe "GET show" do
    it "assigns the requested paper as @paper" do
      get :show, {:id => @paper.id}, valid_session
      assigns(:paper).should eq(@paper)
    end
    after do
      @paper.delete
    end
  end



  describe "GET edit" do
    before do
      @paper = Paper.new(valid_attributes)
      @paper.add_file(upload_file("test.pdf","application/pdf"))
      @paper.save
    end
    it "assigns the requested paper as @paper" do
      get :edit, {:id => @paper.to_param}, valid_session
      assigns(:paper).should eq(@paper)
    end
    after do
      @paper.delete
    end
  end

  describe "PUT update" do
    describe "with valid params" do

=begin
      it "updates the requested paper" do
        Paper.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => paper.id, :paper => { "these" => "params" }}, valid_session
      end
=end

      it "assigns the requested paper as @paper and redirects to paper" do
        @paper.update_attributes({title:"Ny titel"})
        @paper.update_attributes({forfatter:["0" =>{gn:"Nyt Fornavn1, sn:Nyt Efternavn1"},"1" => {gn:"Nyt Fornavn2", sn:"Nyt Efternavn2"},"1" => {gn:"Nyt Fornavn3", sn:"Nyt Efternavn3"}]})
        valid_attributes[:title] = "Ny titel"
        valid_attributes[:forfatter] =  ["0" =>{gn:"Nyt Fornavn1, sn:Nyt Efternavn1"},"1" => {gn:"Nyt Fornavn2", sn:"Nyt Efternavn2"},"1" => {gn:"Nyt Fornavn3", sn:"Nyt Efternavn3"}]
        put :update, {:id => @paper.pid, :paper => valid_attributes}, valid_session
        assigns(:paper).should eq(@paper)
      end


      it "redirects to the paper" do
        valid_attributes[:title] = "en anden ny titel"
        valid_attributes[:forfatter] =  ["0" =>{gn:"Nyt Fornavn1, sn:Nyt Efternavn1"},"1" => {gn:"Nyt Fornavn2", sn:"Nyt Efternavn2"},"1" => {gn:"Nyt Fornavn3", sn:"Nyt Efternavn3"}]
        put :update, {:id => @paper.pid, :paper => valid_attributes}, valid_session
        response.should redirect_to(@paper)
      end
    end

    describe "with invalid params" do
      it "assigns the paper as @paper and re-renders the edit template" do
        # paper = Paper.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paper.any_instance.stub(:save).and_return(false)
        put :update, {:id => @paper.pid, :paper => {  }}, valid_session
        assigns(:paper).should eq(@paper)
      end

      it "re-renders the 'edit' template" do
        # paper = Paper.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paper.any_instance.stub(:save).and_return(false)
        put :update, {:id => @paper.pid, :paper => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end




  describe "POST create" do
    describe "with valid params" do
      it "creates a new Paper and assigns as @paper" do
      	file = upload_file("test.pdf","application/pdf")
        expect {
          post :create, {:paper => valid_attributes, :content => file}, valid_session
        }.to change(Paper, :count).by(1)
      end
      it "assigns a newly created paper as @paper" do
        file = fixture_file_upload("/test.pdf","application/pdf")
        file.stub(:original_filename).and_return("test.pdf")
        post :create, {:paper => valid_attributes, :content => file}, valid_session
        assigns(:paper).should be_a(Paper)
        assigns(:paper).should be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved paper as @paper" do
        # Trigger the behavior that occurs when invalid params are submitted
        Paper.any_instance.stub(:save).and_return(false)
   #     file = upload_file("test.pdf","application/pdf")
        post :create, {:paper => {  }}, valid_session
        assigns(:paper).should be_a_new(Paper)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Paper.any_instance.stub(:save).and_return(false)
        file = fixture_file_upload("/test.pdf","application/pdf")
        file.stub(:original_filename).and_return("test.pdf")
        post :create, {:paper => {  }, :content => file}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested paper and redirects to papers list" do
      paper = Paper.new(valid_attributes)
      paper.add_file(upload_file("test.pdf","application/pdf"))
      paper.save
      expect {
        delete :destroy, {:id => paper.pid}, valid_session
      }.to change(Paper, :count).by(-1)
    end


    it "redirects to the papers list" do
      paper = Paper.new(valid_attributes)
      paper.add_file(upload_file("test.pdf","application/pdf"))
      paper.save
      delete :destroy, {:id => paper.pid}, valid_session
      response.should redirect_to(papers_url)
    end
  end

  after do
    Paper.all.each { |p| p.delete}
  end
end
